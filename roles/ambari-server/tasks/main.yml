---
- name: Load variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../ambari-server/vars

- name: Install the ambari-server package
  package:
    name: ambari-server
    update_cache: yes
    state: latest
  notify: Reload systemd

- meta: flush_handlers


- block:
    - name: Install {{ database }} required packages
      package:
        name: "{{ item }}"
        update_cache: yes
        state: present
      with_items: "{{ lookup('vars', database + '_packages') | join(',') }}"

    - name: Load the Ambari Server schema (postgres)
      postgresql_db:
        name: "{{ database_options.ambari_db_name }}"
        maintenance_db: "{{ database_options.ambari_db_name }}"
        login_host: "{{ database_options.external_hostname|default(ansible_fqdn,true) }}"
        port: "{{ postgres_port }}"
        login_user: "{{ database_options.ambari_db_username }}"
        login_password: "{{ database_options.ambari_db_password }}"
        state: restore
        target: /var/lib/ambari-server/resources/Ambari-DDL-Postgres-CREATE.sql
        ssl_mode: disable

  when: database == "postgres"

- name: Configure the Ambari JDBC driver
  shell: /usr/sbin/ambari-server setup --jdbc-db={{ database }} --jdbc-driver={{ lookup('vars', database + '_jdbc_location') }}
  notify: Restart ambari-server

- name: Set the Ambari Server Java setup option (OpenJDK)
  set_fact:
    ambari_java_options: "-j {{ openjdk_path }}"
  when: java == "openjdk"

- name: Set the Ambari Server Java setup option (Oracle JDK)
  set_fact:
    ambari_java_options: "-j {{ oraclejdk_options.base_folder }}/latest"
  when: java == "oraclejdk"

- name: Update embedded java download url
  lineinfile:
    dest: /etc/ambari-server/conf/ambari.properties
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: yes
  with_items:
    - { regexp: '^(jdk.*\.jcpol-url)=(.*)/ARTIFACTS/(.*)', line: '\g<1>={{ repo_base_url }}/ARTIFACTS/\g<3>' }
    - { regexp: '^(jdk.*\.url)=(.*)/ARTIFACTS/(.*)', line: '\g<1>={{ repo_base_url }}/ARTIFACTS/\g<3>' }
  when: java == 'embedded'

- name: Run Ambari Server setup
  shell: /usr/sbin/ambari-server setup -s {{ ambari_java_options|default("") }} {{ ambari_database_options|default("") }}
  notify: Restart ambari-server

- name: Update ambari-server log dir
  lineinfile:
    dest: /etc/ambari-server/conf/log4j.properties
    regexp: '^ambari.log.dir='
    line: 'ambari.log.dir={{ base_log_dir }}/ambari-server'
  notify: Restart ambari-server

- name: Increase the Ambari Server startup timeout
  lineinfile:
    path: /etc/ambari-server/conf/ambari.properties
    state: present
    line: 'server.startup.web.timeout=120'
  notify: Restart ambari-server

- meta: flush_handlers

- name: Make sure the ambari-server service is started
  service:
    name: ambari-server
    state: started

- name: Make sure the ambari-server service is enabled
  service:
    name: ambari-server
    enabled: yes
  ignore_errors: true
